let line =
  'info move C16 visits 9 utility -0.155703 winrate 0.423808 scoreMean -0.998299 scoreStdev 21.1652 scoreLead -0.998299 scoreSelfplay -1.28311 prior 0.0753075 lcb 0.409065 utilityLcb -0.196984 order 0 pv C16 D4 Q16 R4 info move R16 visits 10 utility -0.156136 winrate 0.423649 scoreMean -0.983801 scoreStdev 21.1507 scoreLead -0.983801 scoreSelfplay -1.29624 prior 0.0815845 lcb 0.405873 utilityLcb -0.205909 order 1 pv R16 Q4 D16 C4 E3 info move Q17 visits 9 utility -0.157899 winrate 0.422771 scoreMean -1.01153 scoreStdev 21.1102 scoreLead -1.01153 scoreSelfplay -1.29661 prior 0.0850204 lcb 0.40745 utilityLcb -0.200799 order 2 pv Q17 Q4 D16 C4 info move R4 visits 9 utility -0.156906 winrate 0.423197 scoreMean -1.00817 scoreStdev 21.174 scoreLead -1.00817 scoreSelfplay -1.28058 prior 0.0840229 lcb 0.40735 utilityLcb -0.201278 order 3 pv R4 D4 Q16 D17 info move D17 visits 9 utility -0.153854 winrate 0.42465 scoreMean -0.966353 scoreStdev 21.2232 scoreLead -0.966353 scoreSelfplay -1.26376 prior 0.081272 lcb 0.408138 utilityLcb -0.200089 order 4 pv D17 D4 Q16 R4 info move D3 visits 9 utility -0.154461 winrate 0.424374 scoreMean -0.968937 scoreStdev 21.1343 scoreLead -0.968937 scoreSelfplay -1.26961 prior 0.0792715 lcb 0.404569 utilityLcb -0.209916 order 5 pv D3 D16 Q4 R16 info move Q3 visits 9 utility -0.154828 winrate 0.424152 scoreMean -0.982334 scoreStdev 21.1193 scoreLead -0.982334 scoreSelfplay -1.26059 prior 0.0741638 lcb 0.401427 utilityLcb -0.218458 order 6 pv Q3 Q16 D4 C16 info move C4 visits 8 utility -0.155154 winrate 0.424162 scoreMean -1.02465 scoreStdev 21.1521 scoreLead -1.02465 scoreSelfplay -1.30144 prior 0.0687611 lcb 0.404011 utilityLcb -0.211576 order 7 pv C4 Q4 D16 Q17 info move D4 visits 7 utility -0.156592 winrate 0.423414 scoreMean -0.984496 scoreStdev 20.9815 scoreLead -0.984496 scoreSelfplay -1.29311 prior 0.0585105 lcb 0.401282 utilityLcb -0.218563 order 8 pv D4 Q4 D17 info move D16 visits 7 utility -0.157921 winrate 0.422874 scoreMean -0.992458 scoreStdev 21.0325 scoreLead -0.992458 scoreSelfplay -1.32319 prior 0.0566302 lcb 0.401412 utilityLcb -0.218016 order 9 pv D16 Q16 C4 info move Q4 visits 6 utility -0.157997 winrate 0.422676 scoreMean -0.990825 scoreStdev 20.8963 scoreLead -0.990825 scoreSelfplay -1.28395 prior 0.0580381 lcb 0.382781 utilityLcb -0.269704 order 10 pv Q4 D16 R16 info move Q16 visits 6 utility -0.157493 winrate 0.422959 scoreMean -0.986219 scoreStdev 20.9398 scoreLead -0.986219 scoreSelfplay -1.29151 prior 0.0521626 lcb 0.381642 utilityLcb -0.27318 order 11 pv Q16 D4 Q3 ownership 0.0439948 0.041638 0.0371482 0.0382593 0.0307112 0.0193622 0.0145432 0.0106513 0.00821866 0.0111707 0.0125507 0.0146796 0.0201181 0.021957 0.0330606 0.0385766 0.049076 0.0531353 0.0564039 0.0428144 0.0523599 0.0453584 0.0471461 0.0289977 0.023185 0.019183 0.0149001 0.0154231 0.0166672 0.018327 0.0181603 0.0227189 0.029749 0.0337635 0.0483043 0.0496516 0.0688102 0.0528489 0.0433871 0.0466328 0.0452581 0.0601913 0.026031 0.0272761 0.0146404 0.0102036 0.0113089 0.0127194 0.0165962 0.0161021 0.0187178 0.0316356 0.012772 0.0468537 0.0491361 0.0490846 0.0607692 0.0382021 0.0435439 0.0571204 -0.0402184 0.0211559 0.0265456 0.0153769 0.0079306 0.00556273 0.00631105 0.00841346 0.0134944 0.0161562 0.0199858 -0.00109225 -0.116876 0.0553232 0.0532874 0.0459567 0.02744 0.0336519 0.0319591 0.0236947 0.0156758 0.0198482 0.0196338 0.0176223 0.0183732 0.0186408 0.019055 0.017123 0.018202 0.0135781 0.00437244 -0.00627798 0.0116813 0.0290501 0.0345626 0.0177211 0.0263927 0.0308141 0.0265364 0.0144665 0.012677 0.0127254 0.0152696 0.014917 0.0149065 0.0145068 0.0152696 0.013118 0.0120595 0.0108376 0.0169995 0.0287891 0.0261494 0.0218409 0.0173518 0.0224576 0.0189898 0.0161755 0.016662 0.0117496 0.0158522 0.0157145 0.0137296 0.0125002 0.0121059 0.0137699 0.0177994 0.013377 0.0136714 0.0118996 0.0130293 0.0194082 0.0152963 0.0116134 0.0183291 0.016357 0.011859 0.0131059 0.0113656 0.0135369 0.012998 0.0112025 0.0101678 0.00917907 0.0100739 0.0130357 0.0115408 0.0117184 0.00769029 0.00920465 0.0115114 0.0106797 0.00840127 0.0128387 0.012865 0.00720008 0.0140364 0.0101184 0.0113955 0.0102512 0.00912407 0.00822106 0.00762521 0.00845796 0.0109994 0.00970174 0.0107496 0.00164049 0.00633965 0.00695153 0.00652184 0.00595804 0.0107408 0.00916747 0.00546439 0.0126057 0.00887149 0.0111241 0.0103742 0.00922384 0.00893185 0.00878319 0.0095602 0.0109515 0.00871473 0.00955754 -0.00104302 0.00247195 0.0036628 0.00435015 0.00432667 0.00992024 0.0111222 0.00559865 0.0128431 0.00866763 0.0112012 0.00988924 0.00875079 0.00889408 0.00901908 0.0102631 0.0112305 0.00911091 0.0100102 0.000273291 0.00330026 0.00343357 0.00305373 0.00370632 0.0121265 0.00940241 0.00407317 0.0114945 0.00909435 0.0124124 0.0106583 0.00970684 0.00959825 0.0102961 0.0110092 0.012399 0.00794747 0.00630503 0.0033694 0.00130697 0.00571419 0.00417108 0.00739182 0.0170889 0.0143335 0.00746679 0.00980397 0.00846686 0.013638 0.0122653 0.0100499 0.0101786 0.0111257 0.0129582 0.0142744 0.00607184 0.00781133 0.00562368 0.00511642 0.0118394 0.00902824 0.00726987 0.0202824 0.0163527 0.0140106 0.0038867 0.00257645 0.00942308 0.0113761 0.0108955 0.0107147 0.0115159 0.0121054 0.00851047 0.00286041 -0.00492806 0.00114123 0.0101877 0.0209833 0.0129617 0.00826827 0.0156569 0.00454515 -0.0165162 0.00280934 0.00413228 0.00550182 0.00783357 0.0110235 0.0110897 0.0110501 0.00789558 0.0067167 0.000856585 -0.00744917 -0.0351091 -0.00308952 0.0207794 0.0247722 0.0147433 0.0256003 0.00460068 -0.128421 -0.0108126 0.00314098 0.00240147 -0.00131214 0.00120698 0.000409428 0.00313746 0.00328195 0.00387158 0.00162737 -0.0299996 -0.163949 0.0231415 0.0370836 0.0377101 0.0175205 0.0282977 0.0266303 0.024556 0.00713878 0.0168178 0.00699249 0.00191128 0.00419949 0.00433882 0.006606 0.00361093 0.00497747 0.0168001 0.00333079 0.0275619 0.0511255 0.0392274 0.0477285 0.0205476 0.0398988 0.0283892 0.0294598 0.0196399 0.017641 0.0123571 0.00603772 0.00541211 0.00368153 0.00511691 0.0082051 0.0138339 0.0205955 0.0208423 0.0405938 0.0415977 0.0652254 0.0460054 0.0254926 0.0180836 0.0224807 0.0182111 0.015973 0.00990988 0.00911034 0.00291375 0.000110664 0.00140921 -0.00021937 0.00264378 0.0095767 0.0131212 0.0274807 0.0334898 0.0379227 0.0477056 0.0460165'
// line =
// 'info move D17 visits 1 utility -0.156223 winrate 0.42382 scoreMean -1.10424 scoreStdev 20.811 scoreLead -1.10424 scoreSelfplay -1.34388 prior 0.0850204 lcb -0.57618 utilityLcb -2.8 order 0 pv D17 info move C16 visits 1 utility -0.150676 winrate 0.426422 scoreMean -1.11893 scoreStdev 20.817 scoreLead -1.11893 scoreSelfplay -1.30362 prior 0.0815845 lcb -0.573578 utilityLcb -2.8 order 1 pv C16 info move C4 visits 0 utility -0.20846 winrate 0.397668 scoreMean -1.07942 scoreStdev 20.8767 scoreLead -1.07942 scoreSelfplay -1.33655 prior 0.0840229 lcb -0.602332 utilityLcb -2.8 order 2 pv C4'
function parseAnalysis(line) {
  // cut ownership
  const infos = line.split(/\s*ownership\s+/)
  let ownerships = null
  if (infos.length >= 2) {
    line = infos[0]
    ownerships = infos[1]
      .split(/\s+/)
      .filter(x => x.trim().length > 0)
      .map(x => parseFloat(x))
  }
  const variations = line
    .split(/\s*info\s+/)
    .slice(1)
    .map(x => x.trim())
    .map(x => {
      // console.log(x)
      let matchPV = x.match(/(pass|[A-Za-z]\d+)(\s+(pass|[A-Za-z]\d+))*$/)
      if (matchPV == null) return null

      let passIndex = matchPV[0].indexOf('pass')
      if (passIndex < 0) passIndex = Infinity
      return [
        x
          .slice(0, matchPV.index)
          .trim()
          .split(/\s+/)
          .slice(0, -1),
        matchPV[0]
          .slice(0, passIndex)
          .split(/\s+/)
          .filter(x => x.length >= 2)
      ]
    })
    .filter(x => x != null)
    .map(x => {
      // console.log(x)
      return x
    })
    .map(([tokens, pv]) => {
      let keys = tokens.filter((_, i) => i % 2 === 0)
      let values = tokens.filter((_, i) => i % 2 === 1)

      keys.push('pv')
      values.push(pv)

      return keys.reduce((acc, x, i) => ((acc[x] = values[i]), acc), {})
    })
    .filter(({move}) => move.match(/^[A-Za-z]\d+$/))
    .map(({move, visits, winrate, scoreLead, pv}) => {
      // console.log(pv)
      return {
        vertex: 'Mock',
        visits: +visits,
        winrate: winrate.includes('.') ? +winrate * 100 : +winrate / 100,
        scoreLead: scoreLead != null ? +scoreLead : null,
        moves: 'Mock'
      }
    })
  return {
    variations,
    ownerships
  }
}

const result = parseAnalysis(line)
console.log(result)
